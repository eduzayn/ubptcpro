import React from 'react';
import { test, expect } from '@playwright/experimental-ct-react';
import { Button } from '../../src/components/ui/button';

/**
 * Testes do componente Button
 */
test.describe('Componente Button', () => {
  test('deve renderizar o bot칚o prim치rio corretamente', async ({ mount }) => {
    // Montar o componente Button
    const component = await mount(
      <Button variant="default">Bot칚o Prim치rio</Button>
    );
    
    // Verificar se o bot칚o est치 vis칤vel
    await expect(component).toBeVisible();
    
    // Verificar se o texto est치 correto
    await expect(component).toContainText('Bot칚o Prim치rio');
    
    // Verificar se as classes corretas est칚o aplicadas
    await expect(component).toHaveClass(/bg-primary text-primary-foreground/);
  });

  test('deve renderizar o bot칚o secund치rio corretamente', async ({ mount }) => {
    // Montar o componente Button
    const component = await mount(
      <Button variant="secondary">Bot칚o Secund치rio</Button>
    );
    
    // Verificar se o bot칚o est치 vis칤vel
    await expect(component).toBeVisible();
    
    // Verificar se o texto est치 correto
    await expect(component).toContainText('Bot칚o Secund치rio');
    
    // Verificar se as classes corretas est칚o aplicadas
    await expect(component).toHaveClass(/bg-secondary text-secondary-foreground/);
  });

  test('deve desabilitar o bot칚o quando a prop disabled 칠 true', async ({ mount }) => {
    // Montar o componente Button com a prop disabled
    const component = await mount(
      <Button variant="default" disabled>Bot칚o Desabilitado</Button>
    );
    
    // Verificar se o bot칚o est치 vis칤vel
    await expect(component).toBeVisible();
    
    // Verificar se o bot칚o est치 desabilitado
    await expect(component).toBeDisabled();
    
    // Verificar se as classes de desabilitado est칚o aplicadas
    await expect(component).toHaveClass(/disabled:opacity-50/);
  });

  test('deve chamar a fun칞칚o onClick quando clicado', async ({ mount }) => {
    // Criar uma vari치vel para rastrear se o bot칚o foi clicado
    let clicked = false;
    
    // Montar o componente Button com um handler de clique
    const component = await mount(
      <Button
        variant="default"
        onClick={() => { clicked = true; }}
      >
        Clique Aqui
      </Button>
    );
    
    // Verificar se o bot칚o est치 vis칤vel
    await expect(component).toBeVisible();
    
    // Clicar no bot칚o
    await component.click();
    
    // Verificar se a fun칞칚o onClick foi chamada
    expect(clicked).toBe(true);
  });

  test('deve mudar de estilo ao passar o mouse', async ({ mount }) => {
    // Montar o componente Button
    const component = await mount(
      <Button variant="default">Bot칚o com Hover</Button>
    );
    
    // Verificar o estilo inicial
    await expect(component).toHaveClass(/bg-primary/);
    
    // Passar o mouse sobre o bot칚o
    await component.hover();
    
    // Verificar se o estilo mudou (verificando uma classe de hover espec칤fica)
    await expect(component).toHaveClass(/hover:bg-primary\/90/);
  });

  test('deve renderizar com um 칤cone quando fornecido', async ({ mount }) => {
    // Montar o componente Button com um 칤cone (usando um elemento span como exemplo)
    const component = await mount(
      <Button variant="default">
        <span className="icon">游댌</span>
        Bot칚o com 칈cone
      </Button>
    );
    
    // Verificar se o bot칚o est치 vis칤vel
    await expect(component).toBeVisible();
    
    // Verificar se o 칤cone est치 vis칤vel
    await expect(component.locator('.icon')).toBeVisible();
    await expect(component.locator('.icon')).toContainText('游댌');
    
    // Verificar se o texto do bot칚o est치 correto
    await expect(component).toContainText('Bot칚o com 칈cone');
  });

  test('deve renderizar em diferentes tamanhos', async ({ mount }) => {
    // Montar o componente Button em tamanho pequeno
    const smallButton = await mount(
      <Button variant="default" size="sm">Bot칚o Pequeno</Button>
    );
    
    // Verificar se o texto est치 correto
    await expect(smallButton).toContainText('Bot칚o Pequeno');
    
    // Verificar se est치 vis칤vel
    await expect(smallButton).toBeVisible();
    
    // Montar o componente Button em tamanho grande
    const largeButton = await mount(
      <Button variant="default" size="lg">Bot칚o Grande</Button>
    );
    
    // Verificar se o texto est치 correto
    await expect(largeButton).toContainText('Bot칚o Grande');
    
    // Verificar se est치 vis칤vel
    await expect(largeButton).toBeVisible();
  });
}); 